"""
A. Interactor
Ограничение времени    1 секунда
Ограничение памяти    256Mb
Ввод    стандартный ввод или input.txt
Вывод    стандартный вывод или output.txt

Лена руководит разработкой тестирующей системы, в которой реализованы
интерактивные задачи. До заверщения очередной стадии проекта осталось написать
модуль, определяющий итоговый вердикт системы для интерактивной задачи.
Итоговый вердикт определяется из кода завершения задачи, вердикта интерактора и
вердикта чекера по следующим правилам:

Вердикт чекера и вердикт интерактора — это целые числа от 0 до 7
включительно. Код завершения задачи — это целое число от -128 до 127
включительно. Если интерактор выдал вердикт 0, итоговый вердикт равен 3 в
случае, если программа завершилась с ненулевым кодом, и вердикту чекера в
противном случае. Если интерактор выдал вердикт 1, итоговый вердикт равен
вердикту чекера. Если интерактор выдал вердикт 4, итоговый вердикт равен 3
в случае, если программа завершилась с ненулевым кодом, и 4 в противном
случае. Если интерактор выдал вердикт 6, итоговый вердикт равен 0. Если
интерактор выдал вердикт 7, итоговый вердикт равен 1. В остальных случаях
итоговый вердикт равен вердикту интерактора. Ваша задача — реализовать этот
модуль.

Формат ввода
Входной файл состоит из трёх строк. В первой задано целое число
r (−128 ≤ r ≤ 127) — код завершения задачи, во второй — целое число
i ( 0 ≤ i ≤ 7) — вердикт интерактора, в третьей — целое число
c ( 0 ≤ c ≤ 7) — вердикт чекера.

Формат вывода
Выведите одно целое число от 0 до 7 включительно — итоговый вердикт системы.

Пример 1
Ввод    Вывод
0
0
0
        0

Пример 2
Ввод    Вывод
-1
0
1
        3

Пример 3
Ввод    Вывод
42
1
6
        6

Пример 4
Ввод    Вывод
44
7
4
        1

Пример 5
Ввод    Вывод
1
4
0
        3

Пример 6
Ввод    Вывод
-3
2
4
        2
"""


def read_input(fname):
    with open(fname, "r") as f:
        r = int(f.readline())  # return value
        i = int(f.readline())  # interactor score
        c = int(f.readline())  # checker score
    assert -128 <= r <= 127
    assert 0 <= i <= 7
    assert 0 <= c <= 7
    return r, i, c


def solution(r, i, c):
    cases = {
        0: 3 if r else c,
        1: c,
        4: 3 if r else 4,
        6: 0,
        7: 1,
    }
    return cases[i] if i in cases else i


print(solution(*read_input("input6.txt")))


inp = ["input" + str(i) + ".txt" for i in range(1, 7)]


def test():
    assert read_input(inp[0]) == (0, 0, 0)
    assert solution(*read_input(inp[0])) == 0
    assert solution(*read_input(inp[1])) == 3
    assert solution(*read_input(inp[2])) == 6
    assert solution(*read_input(inp[3])) == 1
    assert solution(*read_input(inp[4])) == 3
    assert solution(*read_input(inp[5])) == 2


test()
